// Generated by CoffeeScript 1.6.3
(function() {
  var Search;

  Search = (function() {
    function Search(client) {
      this.client = client;
    }

    Search.prototype.issues = function(repo, state, keyword, cb) {
      if (state !== 'closed') {
        state = 'open';
      }
      return this.client.get("/legacy/issues/search/" + repo + "/" + state + "/" + keyword, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Search issues error'));
        } else {
          return cb(null, b.issues, h);
        }
      });
    };

    Search.prototype.repos = function(keyword, language, start_page, cb) {
      var param;
      param = {};
      if (language) {
        param['language'] = language;
      }
      if (start_page) {
        param['start_page'] = start_page;
      }
      return this.client.get("/legacy/repos/search/" + keyword, param, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Search repos error'));
        } else {
          return cb(null, b.repositories, h);
        }
      });
    };

    Search.prototype.users = function(keyword, start_page, cb) {
      var param;
      param = {};
      if (start_page) {
        param['start_page'] = start_page;
      }
      return this.client.get("/legacy/user/search/" + keyword, param, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Search users error'));
        } else {
          return cb(null, b.users, h);
        }
      });
    };

    Search.prototype.emails = function(email, cb) {
      return this.client.get("/legacy/user/email/" + email, function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('Search email error'));
        } else {
          return cb(null, b.user, h);
        }
      });
    };

    return Search;

  })();

  module.exports = Search;

}).call(this);
